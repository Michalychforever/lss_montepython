#------Experiments to test (separated with commas)-----

#data.experiments=['ngc_z3_marg','sgc_z3_marg','ngc_z1_marg','sgc_z1_marg']
data.experiments = ['bao_fs_ngc_z3_marg','bao_fs_sgc_z3_marg','bao_fs_ngc_z1_marg','bao_fs_sgc_z1_marg']


#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
#
data.over_sampling=[1, 2, 2, 2, 2]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']      = [  2.2377,   None, None,      0.015, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [ 0.12010,   None, None,     0.0013,    1, 'cosmo']
data.parameters['h']      = [  0.68,   None, None,      0.01, 1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.0447,   None, None,      0.015,    1, 'cosmo']
data.parameters['n_s']          = [  0.9659,   None, None,     0.0042,    1, 'cosmo']

### parameters needed for the CMB
#data.parameters['100*theta_s']  = [ 1.04110,   None, None,    0.00030,    1, 'cosmo']
#data.parameters['tau_reio']     = [  0.0543,  0.004, None,      0.008,    1, 'cosmo']

### M_nu and N_eff, if you want to scan over them
#data.parameters['M_tot']     = [  0.06,  0.06, 0.18,      0.1,    1, 'cosmo']
#data.parameters['deg_ncdm']     = [  2.7788,  0.0, None,      0.2,    1, 'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name
#
#for LSS the normalization can be sampled in a fast mode along with other nuisance parameters: norm = np.sqrt(A_s/A_s_fiducial)
# A_s_fiducial needs to be *fixed* in .param file
 
#Don't forget to account for that by multiplying sigma8 as 
#sigma8_true = norm* sigma8_class
# this parameter is commented for now, but if you run the BOSS likelihood without Planck, using "norm" instead of A_s boosts the chains considerably  

#data.parameters['norm']         = [ 1.0069,    0.2,  2.,     8.9159e-02,     1,'nuisance']

### BOSS nuisance parameters

data.parameters['b^{(1)}_1']         = [ 1.8875,    1.,  4.,     5.8121e-02,     1,'nuisance']
data.parameters['b^{(1)}_2']         = [ -3.2653,    -1,  -1,     9.4182e-01,     1,'nuisance']
data.parameters['b^{(1)}_{G_2}']         = [ 5.3461e-01,    -1,  -1,     4.7171e-01,     1,'nuisance']
#data.parameters['c^{(1)}_{0}']         = [ -7.3973e-01,    -1,  -1,     4.2080,     10,'nuisance']
#data.parameters['c^{(1)}_{2}']         = [  -3.5711,    -1,  -1,     4.2764,     10,'nuisance']
#data.parameters['P^{(1)}_{shot}']         = [ 6.1171,    -1,  -1,     2.1319,     1000,'nuisance']
#data.parameters['b^{(1)}_4']         = [ 2.7619e-01,    -1,  -1,     1.3367e-01,     1000,'nuisance']


data.parameters['b^{(2)}_1']         = [  2.0698,    1.,  4.,     8.9879e-02,     1,'nuisance']
data.parameters['b^{(2)}_2']         = [ -1.7563,    -1,  -1,     1.8779,     1,'nuisance']
data.parameters['b^{(2)}_{G_2}']         = [  1.9468e-01,    -1,  -1,     6.6736e-01,     1,'nuisance']
#data.parameters['c^{(2)}_{0}']         = [ -3.1063,    -1,  -1,     7.4157,     10,'nuisance']
#data.parameters['c^{(2)}_{2}']         = [  1.4890,    -1,  -1,     6.3029,     10,'nuisance']
#data.parameters['P^{(2)}_{shot}']         = [ 1.0232e-01,    -1,  -1,     2.4506,     1000,'nuisance']
#data.parameters['b^{(2)}_4']         = [ 3.0953e-01,    -1,  -1,     1.8642e-01,     1000,'nuisance']

data.parameters['b^{(3)}_1']         = [ 1.8682,    1.,  4.,     4.4482e-02,     1,'nuisance']
data.parameters['b^{(3)}_2']         = [ -2.1708,    -1,  -1,     7.6930e-01,     1,'nuisance']
data.parameters['b^{(3)}_{G_2}']         = [ -9.1663e-02,    -1,  -1,     3.3288e-01,     1,'nuisance']
#data.parameters['c^{(3)}_{0}']         = [ -2.7850,    -1,  -1,     3.6534,     10,'nuisance']
#data.parameters['c^{(3)}_{2}']         = [  2.0129,    -1,  -1,     4.1430,     10,'nuisance']
#data.parameters['P^{(3)}_{shot}']         = [ 7.6269e-01,    -1,  -1,     1.4192,     1000,'nuisance']
#data.parameters['b^{(3)}_4']         = [ 4.1584e-01,    -1,  -1,     2.0665e-01,     1000,'nuisance']


data.parameters['b^{(4)}_1']         = [  1.8797,    1.,  4.,     7.7179e-02,     1,'nuisance']
data.parameters['b^{(4)}_2']         = [ -3.2115,    -1,  -1,     1.6206,     1,'nuisance']
data.parameters['b^{(4)}_{G_2}']         = [ 7.5104e-01,    -1,  -1,    6.4725e-01,     1,'nuisance']
#data.parameters['c^{(4)}_{0}']         = [ -5.2660,    -1,  -1,     7.6070,     10,'nuisance']
#data.parameters['c^{(4)}_{2}']         = [  -3.4073,    -1,  -1,     7.6190,     10,'nuisance']
#data.parameters['P^{(4)}_{shot}']         = [ 4.3376,    -1,  -1,     3.0429,     1000,'nuisance']
#data.parameters['b^{(4)}_4']         = [ 2.5759e-01,    -1,  -1,     4.1677e-01,     1000,'nuisance']

# Derived parameters

#data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
#data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_m']    = [1, None, None, 0,     1,   'derived']
#data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
#data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']


# Other cosmo parameters (fixed parameters, precision parameters, etc.)

#data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['tau_reio'] = 0.0543
data.cosmo_arguments['YHe'] = 0.2454
data.cosmo_arguments['k_pivot'] = 0.05
#data.cosmo_arguments['n_s'] = 0.9649
#data.cosmo_arguments['omega_b'] = 0.02237

### uncomment if you use "norm" 
#data.cosmo_arguments['A_s'] = 2.0989e-9

data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 100.
data.cosmo_arguments['non linear'] = ' PT '
data.cosmo_arguments['IR resummation'] = ' Yes '
data.cosmo_arguments['Bias tracers'] = ' Yes '
data.cosmo_arguments['RSD'] = ' Yes '
data.cosmo_arguments['AP'] = ' Yes '
data.cosmo_arguments['Omfid'] = 0.31
data.cosmo_arguments['z_pk'] = '0.38,0.61'
data.cosmo_arguments['FFTLog mode'] = 'FAST'


# The base model features two massless
# # and one massive neutrino with m=0.06eV.
# # The settings below ensures that Neff=3.046
# # and m/omega = 93.14 eV
#data.cosmo_arguments['N_ur'] = 0.00641
#data.cosmo_arguments['N_ncdm'] = 1
#data.cosmo_arguments['deg_ncdm'] = 3
# #data.cosmo_arguments['m_ncdm'] = 0.06
#data.cosmo_arguments['T_ncdm'] = 0.71611

data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611

# These two are required to get sigma8 as a derived parameter 
# (class must compute the P(k) until sufficient k)
#data.cosmo_arguments['output'] = 'mPk'
#data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

#------ Mcmc parameters ----

data.N=10
data.write_step=5
